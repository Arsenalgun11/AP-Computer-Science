// FileName:  WhileLoopCodingQuiz.java// Completing this program must be done INDEPENDENTLY.package ch05;import java.util.Scanner;public class WhileLoopCodingQuiz{	public static void main(String [] args)	{			// Part 1.  IDENTIFYING RANDOM INTEGERS AS EITHER EVEN OR ODD.		// Write the code for a COUNT-UP while loop that will run		// 10 times.  Each time the loop runs a random integer between 100		// and 999 inclusive will be generated and the random integer will		// be printed right justified in a field width of 6 along with		// either the phrase "is even" or the phrase "is odd".  Make sure you		// print each random integer and its identifying phrase on a separate line.		//		// Here is a sample run of the segment of code:			/*			   261 is odd.			   694 is even.			   844 is even.			   119 is odd.			   268 is even.			   566 is even.			   492 is even.			   150 is even.			   627 is odd.			   533 is odd.		 */		int cntr = 0;		int sum = 0;		int num = 0;		while (cntr < 10)		{ 			num = (int)(Math.random()*900) + 100;			if (num % 2 == 0)			{				System.out.printf("%6d is even.%n", num);			}			else 			{				System.out.printf("%6d is odd.%n", num);			}			cntr++;		}		System.out.println();		System.out.println();		// *******************************************************************		// Part 2. SUMMING THE MULTIPLES OF 6 IN REVERSE ORDER.		// Write the code for a COUNT-DOWN while loop that sums		// all of the multiples of 6 from 72 down to 0 IN REVERSE ORDER.		// The loop will print only multiples of 6 as it adds each one		// to the sum.  The sum should be printed only once.		// Output should look like this:		/*		This multiple of 6 has been added to the sum    72		This multiple of 6 has been added to the sum    66		This multiple of 6 has been added to the sum    60		This multiple of 6 has been added to the sum    54		This multiple of 6 has been added to the sum    48		This multiple of 6 has been added to the sum    42		This multiple of 6 has been added to the sum    36		This multiple of 6 has been added to the sum    30		This multiple of 6 has been added to the sum    24		This multiple of 6 has been added to the sum    18		This multiple of 6 has been added to the sum    12		This multiple of 6 has been added to the sum     6		This multiple of 6 has been added to the sum     0		The sum of the multiples of 6 is 468		 */		cntr = 72;		sum = 0;		num = 0;		while (cntr > 0)		{		num = cntr;		System.out.printf("This multiple of 6 has been added to the sum %6d%n", cntr);		sum += cntr;		cntr = cntr - 6;		}		System.out.println("The sum of the multiples of 6 is " + sum);		System.out.println();		System.out.println();		// *******************************************************************		// Part 3. PRINTING THE MULTIPLES OF 5 BUT SUMMING THE EVEN ONES.		// Write the code for a COUNT-UP while loop that will print each multiple		// of 5 between 1 and 50 along with either the phrase "is even" or the phrase		// "is odd". Each multiple of 5 will be printed on a separate line		// right justified in a field width of 4 using a printf statement.		// The loop will also sum ONLY THE EVEN MULTIPLES OF 5 and then print		// the sum once the final value has been obtained.  You don't have to		// use a printf statement to print the sum.  You must use only one		// while loop in your code.  Here is a sample run of the segment of code:			/*			     5 is odd.			    10 is even.			    15 is odd.			    20 is even.			    25 is odd.			    30 is even.			    35 is odd.			    40 is even.			    45 is odd.			    50 is even.			The sum of the even multiples of 5 is 150		 */		cntr = 5;		sum = 0;		num = 0;		while (cntr <= 50)		{			if (cntr % 2 == 0)			{				System.out.printf("%4d is even.%n", cntr);				sum += cntr;			}			else			{				System.out.printf("%4d is odd.%n", cntr);			}			cntr +=5;		}		System.out.println(" The sum of the even multiples of 5 is "+ sum);		System.out.println();		System.out.println();		// *******************************************************************		// Part 4.  FINDING THE HYPOTENUSE OF A RIGHT TRIANGLE.		// Write a while (true) loop that allows the user to calculate the		// hypotenuse of a right triangle when the length of both legs are		// received from the keyboard.  Each leg will be received from the		// keyboard as a floating-point value.  THE LOOP WILL END IMMEDIATELY		// IF A NEGATIVE VALUE OR 0 IS ENTERED FOR LEG 1.		// If a positive value greater than 0 is entered for leg 1, then the		// user will be prompted to enter a value for leg 2.  If the value of		// leg 2 is greater than 0, then code will be executed that will		// calculate and print the values of the legs and of the hypotenuse.		// YOU DON'T HAVE TO USE A PRINTF STATEMENT TO PRINT ANYTHING!		// If during a run of the program the value of leg 1 is positive but		// the value of leg 2 is less than or equal to zero, then the		// hypotenuse WILL NOT BE CALCULATED and the program will print the		// error message:  "Neither leg can be less than zero. Try again."		//		// Here are sample runs of the program for this part of the program:			/*			Enter a positive number for leg 1 or a negative number to quit: 3.0			Enter a number for leg 2 of a right triangle: 4.0			The Triangle with leg1 of 3.00 and leg2 of 4.00 has a hypotenuse of 5.000			Enter a positive number for leg 1 or a negative number to quit: 3.33			Enter a number for leg 2 of a right triangle: -4.28			Neither leg can be less than zero. Try again.			Enter a positive number for leg 1 or a negative number to quit: 5.0			Enter a number for leg 2 of a right triangle: 12.0			The Triangle with leg1 of 5.00 and leg2 of 12.00 has a hypotenuse of 13.000			Enter a positive number for leg 1 or a negative number to quit: -5		 */			Scanner reader = new Scanner(System.in);		double leg1 = 0.00;		double leg2 = 0.00;		double hypoS = 0.00;		double hypo =0.00;		while (true)		{			System.out.println("Enter a positive number for leg 1 or a negative number to quit: ");			leg1 = reader.nextDouble();			if (leg1 <= 0)			{				break;			}			else 			{				System.out.println("Enter a number for leg 2 of a right triangle: ");				leg2 = reader.nextDouble();					while (leg2 <= 0)				{					System.out.println("Neither leg can be less than zero. Try again.");					System.out.println("Enter a number for leg 2 of a right triangle: ");					leg2 = reader.nextDouble();				}				hypoS = (Math.pow(leg1, 2)) + (Math.pow(leg2, 2));				hypo = Math.sqrt(hypoS);				System.out.println("The Triangle with leg1 of " + leg1 + " and leg2 of " + leg2 + " has a hypotenuse of " + hypo + ".");			}		}		System.out.println("Program Terminated.");	}}